# Open-WebUI Stack
# Environment variables are loaded from .env file by default
# See README.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - All services support ARM64 architecture
# - Using latest tags for better ARM64 support where applicable

version: "3.8"

services:
  open-webui:
    image: "ghcr.io/open-webui/open-webui:${OPEN_WEBUI_VERSION:-main}"
    environment:
      - TZ=${TZ}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}

      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-true}
      - DEFAULT_USER_ROLE=${DEFAULT_USER_ROLE:-pending}
      - WEBUI_AUTH=${WEBUI_AUTH:-true}
      
      # OAuth Authentication Configuration
      - ENABLE_OAUTH_SIGNUP=${ENABLE_OAUTH_SIGNUP:-false}
      - OAUTH_MERGE_ACCOUNTS_BY_EMAIL=${OAUTH_MERGE_ACCOUNTS_BY_EMAIL:-false}
      - OAUTH_UPDATE_PICTURE_ON_LOGIN=${OAUTH_UPDATE_PICTURE_ON_LOGIN:-false}
      - ENABLE_LOGIN_FORM=${ENABLE_LOGIN_FORM:-true}
      
      # Generic OAuth/OIDC Provider Settings
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID:-}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-}
      - OPENID_PROVIDER_URL=${OPENID_PROVIDER_URL:-}
      - OAUTH_PROVIDER_NAME=${OAUTH_PROVIDER_NAME:-SSO}
      - OAUTH_SCOPES=${OAUTH_SCOPES:-openid email profile}
      - OPENID_REDIRECT_URI=${OPENID_REDIRECT_URI:-}
      
      # Google OAuth Settings
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GOOGLE_OAUTH_SCOPE=${GOOGLE_OAUTH_SCOPE:-openid email profile}
      - GOOGLE_REDIRECT_URI=${GOOGLE_REDIRECT_URI:-}
      
      # Microsoft OAuth Settings  
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID:-}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET:-}
      - MICROSOFT_CLIENT_TENANT_ID=${MICROSOFT_CLIENT_TENANT_ID:-}
      - MICROSOFT_OAUTH_SCOPE=${MICROSOFT_OAUTH_SCOPE:-openid email profile}
      - MICROSOFT_REDIRECT_URI=${MICROSOFT_REDIRECT_URI:-}
      
      # GitHub OAuth Settings
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - GITHUB_CLIENT_SCOPE=${GITHUB_CLIENT_SCOPE:-user:email}
      - GITHUB_CLIENT_REDIRECT_URI=${GITHUB_CLIENT_REDIRECT_URI:-}
      
      # OAuth Role and Group Management
      - ENABLE_OAUTH_ROLE_MANAGEMENT=${ENABLE_OAUTH_ROLE_MANAGEMENT:-false}
      - ENABLE_OAUTH_GROUP_MANAGEMENT=${ENABLE_OAUTH_GROUP_MANAGEMENT:-false}
      - ENABLE_OAUTH_GROUP_CREATION=${ENABLE_OAUTH_GROUP_CREATION:-false}
      - OAUTH_USERNAME_CLAIM=${OAUTH_USERNAME_CLAIM:-name}
      - OAUTH_EMAIL_CLAIM=${OAUTH_EMAIL_CLAIM:-email}
      - OAUTH_PICTURE_CLAIM=${OAUTH_PICTURE_CLAIM:-picture}
      - OAUTH_GROUP_CLAIM=${OAUTH_GROUP_CLAIM:-groups}
      - OAUTH_ROLES_CLAIM=${OAUTH_ROLES_CLAIM:-roles}
      - OAUTH_ALLOWED_ROLES=${OAUTH_ALLOWED_ROLES:-user,admin}
      - OAUTH_ADMIN_ROLES=${OAUTH_ADMIN_ROLES:-admin}
      - OAUTH_ALLOWED_DOMAINS=${OAUTH_ALLOWED_DOMAINS:-*}
      - OAUTH_CODE_CHALLENGE_METHOD=${OAUTH_CODE_CHALLENGE_METHOD:-}
      
      # Trusted Header Authentication (for reverse proxy SSO)
      - WEBUI_AUTH_TRUSTED_EMAIL_HEADER=${WEBUI_AUTH_TRUSTED_EMAIL_HEADER:-}
      - WEBUI_AUTH_TRUSTED_NAME_HEADER=${WEBUI_AUTH_TRUSTED_NAME_HEADER:-}
      - WEBUI_AUTH_TRUSTED_GROUPS_HEADER=${WEBUI_AUTH_TRUSTED_GROUPS_HEADER:-}
    volumes:
      - "open_webui_data_volume:/app/backend/data"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      - stack
      - traefik_public
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: ${OPEN_WEBUI_REPLICAS:-1}
      resources:
        limits:
          memory: ${OPEN_WEBUI_MEMORY_LIMIT:-4G}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      labels:
        - "traefik.enable=true"
        - "traefik.swarm.network=${TRAEFIK_PUBLIC_NETWORK:-traefik_public}"
        - "traefik.http.routers.openwebui-public-http.rule=Host(`${OPEN_WEBUI_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.openwebui-public-http.entrypoints=web"
        - "traefik.http.routers.openwebui-public-http.service=openwebui"
        - "traefik.http.routers.openwebui-public-https.rule=Host(`${OPEN_WEBUI_PUBLIC_DOMAIN}`)"
        - "traefik.http.routers.openwebui-public-https.entrypoints=websecure"
        - "traefik.http.routers.openwebui-public-https.service=openwebui"
        - "traefik.http.routers.openwebui-public-https.tls=true"
        - "traefik.http.routers.openwebui-public-https.tls.certresolver=${OPEN_WEBUI_CERT_RESOLVER:-letsencrypt}"
        - "traefik.http.routers.openwebui-private-http.rule=Host(`${OPEN_WEBUI_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.openwebui-private-http.entrypoints=web"
        - "traefik.http.routers.openwebui-private-http.service=openwebui"
        - "traefik.http.routers.openwebui-private-https.rule=Host(`${OPEN_WEBUI_PRIVATE_DOMAIN}`)"
        - "traefik.http.routers.openwebui-private-https.entrypoints=websecure"
        - "traefik.http.routers.openwebui-private-https.service=openwebui"
        - "traefik.http.routers.openwebui-private-https.tls=true"
        - "traefik.http.routers.openwebui-private-https.tls.certresolver=${OPEN_WEBUI_CERT_RESOLVER:-letsencrypt}"
        - "traefik.http.services.openwebui.loadbalancer.server.port=8080"



  redis:
    image: "redis:7-alpine"
    environment:
      - TZ=${TZ}
    networks:
      - stack
    volumes:
      - "redis_data_volume:/data"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: ${ENABLE_REDIS:-1}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  postgres:
    image: "postgres:${POSTGRES_VERSION:-15-alpine}"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-openwebui}
      - POSTGRES_DB=${POSTGRES_DB:-openwebui}
      - POSTGRES_INITDB_ARGS=--data-checksums
    networks:
      - stack
    volumes:
      - "postgres_data_volume:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      replicas: ${ENABLE_POSTGRES:-0}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: 10m

  cloudflared:
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    user: "${PUID}:${PGID}"
    environment:
      - TUNNEL_TOKEN=${OPEN_WEBUI_CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - stack
    deploy:
      replicas: ${ENABLE_OPEN_WEBUI_CLOUDFLARED:-0}
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s


networks:
  # Internal overlay network for this stack
  stack:
    name: "${STACK_NETWORK_NAME:-openwebui_stack}"
    attachable: true

  # External proxy network used by Traefik
  traefik_public:
    external: true
    name: "${TRAEFIK_PUBLIC_NETWORK:-traefik_public}"

volumes:
  # Open-WebUI data volume for user data, models, etc.
  open_webui_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_open_webui_data"
    driver: local
  
  # Redis data volume
  redis_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_redis_data"
    driver: local
  
  # PostgreSQL data volume
  postgres_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_postgres_data"
    driver: local
  

  

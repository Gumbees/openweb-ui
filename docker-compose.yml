# Open-WebUI Stack
# Environment variables are loaded from .env file by default
# See README.md for detailed documentation
#
# ARM64 COMPATIBILITY NOTES:
# - All services support ARM64 architecture
# - Using latest tags for better ARM64 support where applicable

version: "3.8"

services:
  open-webui:
    container_name: "${CONTAINER_NAME_PREFIX}_open_webui"
    image: "ghcr.io/open-webui/open-webui:${OPEN_WEBUI_VERSION:-main}"
    environment:
      - TZ=${TZ}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}

      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ENABLE_SIGNUP=${ENABLE_SIGNUP:-true}
      - DEFAULT_USER_ROLE=${DEFAULT_USER_ROLE:-pending}
      - WEBUI_AUTH=${WEBUI_AUTH:-true}
      
      # OAuth/OpenID Connect configuration for Entra ID
      - OAUTH_CLIENT_ID=${OAUTH_CLIENT_ID:-}
      - OAUTH_CLIENT_SECRET=${OAUTH_CLIENT_SECRET:-}
      - OPENID_PROVIDER_URL=${OPENID_PROVIDER_URL:-}
      - OAUTH_SCOPES=${OAUTH_SCOPES:-openid email profile}
      - OAUTH_PROVIDER_NAME=${OAUTH_PROVIDER_NAME:-Entra ID}
      - OAUTH_USERNAME_CLAIM=${OAUTH_USERNAME_CLAIM:-preferred_username}
      - OAUTH_EMAIL_CLAIM=${OAUTH_EMAIL_CLAIM:-email}
      - OAUTH_PICTURE_CLAIM=${OAUTH_PICTURE_CLAIM:-picture}
      - OAUTH_MERGE_ACCOUNTS_BY_EMAIL=${OAUTH_MERGE_ACCOUNTS_BY_EMAIL:-false}
      - ENABLE_OAUTH_SIGNUP=${ENABLE_OAUTH_SIGNUP:-true}
      
      # Database configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-openwebui}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-openwebui}
    #ports:
      #- "${OPEN_WEBUI_PORT:-3000}:8080"
    volumes:
      - "open_webui_data_volume:/app/backend/data"
      - "/etc/localtime:/etc/localtime:ro"
    networks:
      open_webui_app:
      open_webui_db:
      open_webui_models:
    depends_on: []
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: ${OPEN_WEBUI_MEMORY_LIMIT:-2G}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.openwebui-public-http.rule=Host(`${OPEN_WEBUI_PUBLIC_DOMAIN}`)"
      - "traefik.http.routers.openwebui-public-http.entrypoints=web"
      - "traefik.http.routers.openwebui-public-http.service=openwebui"
      - "traefik.http.routers.openwebui-public-https.rule=Host(`${OPEN_WEBUI_PUBLIC_DOMAIN}`)"
      - "traefik.http.routers.openwebui-public-https.entrypoints=websecure"
      - "traefik.http.routers.openwebui-public-https.service=openwebui"
      - "traefik.http.routers.openwebui-public-https.tls=true"
      - "traefik.http.routers.openwebui-public-https.tls.certresolver=${OPEN_WEBUI_CERT_RESOLVER:-letsencrypt}"
      - "traefik.http.routers.openwebui-private-http.rule=Host(`${OPEN_WEBUI_PRIVATE_DOMAIN}`)"
      - "traefik.http.routers.openwebui-private-http.entrypoints=web"
      - "traefik.http.routers.openwebui-private-http.service=openwebui"
      - "traefik.http.routers.openwebui-private-https.rule=Host(`${OPEN_WEBUI_PRIVATE_DOMAIN}`)"
      - "traefik.http.routers.openwebui-private-https.entrypoints=websecure"
      - "traefik.http.routers.openwebui-private-https.service=openwebui"
      - "traefik.http.routers.openwebui-private-https.tls=true"
      - "traefik.http.routers.openwebui-private-https.tls.certresolver=${OPEN_WEBUI_CERT_RESOLVER:-letsencrypt}"
      - "traefik.http.services.openwebui.loadbalancer.server.port=8080"

  # Ollama for local AI model hosting (CPU version)
  ollama:
    container_name: "${CONTAINER_NAME_PREFIX}_ollama"
    image: "ollama/ollama:${OLLAMA_VERSION:-latest}"
    environment:
      - TZ=${TZ}
      - OLLAMA_KEEP_ALIVE=${OLLAMA_KEEP_ALIVE:-5m}
      - OLLAMA_HOST=0.0.0.0
    volumes:
      - "ollama_data_volume:/root/.ollama"
    #ports:
      #- "${OLLAMA_PORT:-11434}:11434"
    networks:
      open_webui_app:
      open_webui_models:
    restart: on-failure:3
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      replicas: ${ENABLE_OLLAMA:-1}
      resources:
        limits:
          memory: ${OLLAMA_MEMORY_LIMIT:-4G}

  redis:
    container_name: "${CONTAINER_NAME_PREFIX}_open_webui_redis"
    image: "redis:7-alpine"
    environment:
      - TZ=${TZ}
    networks:
      open_webui_db:
    volumes:
      - "redis_data_volume:/data"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: on-failure:3
    deploy:
      replicas: ${ENABLE_REDIS:-1}

  postgres:
    container_name: "${CONTAINER_NAME_PREFIX}_open_webui_postgres"
    image: "postgres:${POSTGRES_VERSION:-15-alpine}"
    environment:
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER:-openwebui}
      - POSTGRES_DB=${POSTGRES_DB:-openwebui}
      - POSTGRES_INITDB_ARGS=--data-checksums
    networks:
      open_webui_db:
    volumes:
      - "postgres_data_volume:/var/lib/postgresql/data"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: on-failure:3
    deploy:
      replicas: ${ENABLE_POSTGRES:-1}
    logging:
      driver: json-file
      options:
        max-file: '5'
        max-size: 10m

  cloudflared:
    container_name: "${CONTAINER_NAME_PREFIX}_open_webui_cloudflared"
    image: "cloudflare/cloudflared:latest"
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    user: "${PUID}:${PGID}"
    environment:
      - TUNNEL_TOKEN=${OPEN_WEBUI_CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      open_webui_app:
    restart: on-failure:3
    deploy:
      replicas: ${ENABLE_OPEN_WEBUI_CLOUDFLARED:-0}
    healthcheck:
      test: ["CMD", "cloudflared", "tunnel", "status"]
      interval: 120s
      timeout: 30s
      retries: 5
      start_period: 60s

networks:
  # App network with internet access
  open_webui_app:
    name: "${OPEN_WEBUI_APP_NETWORK}"
    driver: bridge

  # Network for model communication
  open_webui_models:
    name: "${OPEN_WEBUI_MODELS_NETWORK}"
    internal: true
    driver: bridge

  # Database network for database communication
  open_webui_db:
    name: "${OPEN_WEBUI_DB_NETWORK}"
    internal: true
    driver: bridge

volumes:
  # Open-WebUI data volume for user data, models, etc.
  open_webui_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_open_webui_data"
    driver: local
  
  # Redis data volume
  redis_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_redis_data"
    driver: local
  
  # PostgreSQL data volume
  postgres_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_postgres_data"
    driver: local
  
  # Ollama models volume
  ollama_data_volume:
    name: "${CONTAINER_NAME_PREFIX}_ollama_data"
    driver: local 